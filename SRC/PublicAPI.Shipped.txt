#nullable enable
abstract Solti.Utils.Primitives.ComparerBase<TConcreteComparer, T>.GetHashCode(T obj) -> int
override Solti.Utils.Primitives.Patterns.DisposableSupportsNotifyOnDispose.AsyncDispose() -> System.Threading.Tasks.ValueTask
override Solti.Utils.Primitives.Patterns.DisposableSupportsNotifyOnDispose.Dispose(bool disposeManaged) -> void
override Solti.Utils.Primitives.Patterns.DisposeByRefObject.AsyncDispose() -> System.Threading.Tasks.ValueTask
override Solti.Utils.Primitives.Patterns.DisposeByRefObject.Dispose(bool disposeManaged) -> void
override Solti.Utils.Primitives.Threading.ObjectPool<T>.Dispose(bool disposeManaged) -> void
Solti.Utils.Primitives.Cache
Solti.Utils.Primitives.CacheSlim
Solti.Utils.Primitives.ComparerBase<TConcreteComparer, T>
Solti.Utils.Primitives.ComparerBase<TConcreteComparer, T>.ComparerBase() -> void
Solti.Utils.Primitives.ConstructorInfoExtractor
Solti.Utils.Primitives.EnumerableExtensions
Solti.Utils.Primitives.ExpressionExtensions
Solti.Utils.Primitives.InstanceMethod
Solti.Utils.Primitives.MethodInfoExtensions
Solti.Utils.Primitives.MethodInfoExtractor
Solti.Utils.Primitives.NodeColor
Solti.Utils.Primitives.NodeColor.Black = 1 -> Solti.Utils.Primitives.NodeColor
Solti.Utils.Primitives.NodeColor.Red = 2 -> Solti.Utils.Primitives.NodeColor
Solti.Utils.Primitives.NodeColor.Unspecified = 0 -> Solti.Utils.Primitives.NodeColor
Solti.Utils.Primitives.Patterns.Disposable
Solti.Utils.Primitives.Patterns.Disposable.CheckNotDisposed() -> void
Solti.Utils.Primitives.Patterns.Disposable.Disposable(bool supportFinalizer = false) -> void
Solti.Utils.Primitives.Patterns.Disposable.Dispose() -> void
Solti.Utils.Primitives.Patterns.Disposable.DisposeAsync() -> System.Threading.Tasks.ValueTask
Solti.Utils.Primitives.Patterns.Disposable.Disposed.get -> bool
Solti.Utils.Primitives.Patterns.Disposable.Disposing.get -> bool
Solti.Utils.Primitives.Patterns.DisposableSupportsNotifyOnDispose
Solti.Utils.Primitives.Patterns.DisposableSupportsNotifyOnDispose.DisposableSupportsNotifyOnDispose(bool supportFinalizer = false) -> void
Solti.Utils.Primitives.Patterns.DisposableSupportsNotifyOnDispose.OnDispose -> System.EventHandler<bool>
Solti.Utils.Primitives.Patterns.DisposeByRefObject
Solti.Utils.Primitives.Patterns.DisposeByRefObject.AddRef() -> int
Solti.Utils.Primitives.Patterns.DisposeByRefObject.DisposeByRefObject() -> void
Solti.Utils.Primitives.Patterns.DisposeByRefObject.RefCount.get -> int
Solti.Utils.Primitives.Patterns.DisposeByRefObject.Release() -> int
Solti.Utils.Primitives.Patterns.DisposeByRefObject.ReleaseAsync() -> System.Threading.Tasks.Task<int>
Solti.Utils.Primitives.Patterns.IDisposableEx
Solti.Utils.Primitives.Patterns.IDisposableEx.Disposed.get -> bool
Solti.Utils.Primitives.Patterns.INotifyOnDispose
Solti.Utils.Primitives.Patterns.INotifyOnDispose.OnDispose -> System.EventHandler<bool>
Solti.Utils.Primitives.Patterns.IResettable
Solti.Utils.Primitives.Patterns.IResettable.Dirty.get -> bool
Solti.Utils.Primitives.Patterns.IResettable.Reset() -> void
Solti.Utils.Primitives.Patterns.IWrapped<T>
Solti.Utils.Primitives.Patterns.IWrapped<T>.Value.get -> T
Solti.Utils.Primitives.Patterns.Singleton<TConcrete>
Solti.Utils.Primitives.Patterns.Singleton<TConcrete>.Singleton() -> void
Solti.Utils.Primitives.Patterns.WriteOnce
Solti.Utils.Primitives.Patterns.WriteOnce.WriteOnce(bool strict = true) -> void
Solti.Utils.Primitives.Patterns.WriteOnce<T>
Solti.Utils.Primitives.Patterns.WriteOnce<T>.HasValue.get -> bool
Solti.Utils.Primitives.Patterns.WriteOnce<T>.Strict.get -> bool
Solti.Utils.Primitives.Patterns.WriteOnce<T>.Value.get -> T
Solti.Utils.Primitives.Patterns.WriteOnce<T>.Value.set -> void
Solti.Utils.Primitives.Patterns.WriteOnce<T>.WriteOnce(bool strict = true) -> void
Solti.Utils.Primitives.PropertyInfoExtensions
Solti.Utils.Primitives.PropertyInfoExtractor
Solti.Utils.Primitives.RedBlackTree<TData>
Solti.Utils.Primitives.RedBlackTree<TData>.Add(Solti.Utils.Primitives.RedBlackTreeNode<TData> node) -> bool
Solti.Utils.Primitives.RedBlackTree<TData>.Add(TData data) -> bool
Solti.Utils.Primitives.RedBlackTree<TData>.Comparer.get -> System.Collections.Generic.IComparer<TData>
Solti.Utils.Primitives.RedBlackTree<TData>.Count.get -> int
Solti.Utils.Primitives.RedBlackTree<TData>.GetEnumerator() -> System.Collections.Generic.IEnumerator<Solti.Utils.Primitives.RedBlackTreeNode<TData>>
Solti.Utils.Primitives.RedBlackTree<TData>.RedBlackTree(System.Collections.Generic.IComparer<TData> comparer) -> void
Solti.Utils.Primitives.RedBlackTree<TData>.Root.get -> Solti.Utils.Primitives.RedBlackTreeNode<TData>
Solti.Utils.Primitives.RedBlackTree<TData>.With(Solti.Utils.Primitives.RedBlackTreeNode<TData> node) -> Solti.Utils.Primitives.RedBlackTree<TData>
Solti.Utils.Primitives.RedBlackTree<TData>.With(TData data) -> Solti.Utils.Primitives.RedBlackTree<TData>
Solti.Utils.Primitives.RedBlackTreeExtensions
Solti.Utils.Primitives.RedBlackTreeNode<TData>
Solti.Utils.Primitives.RedBlackTreeNode<TData>.Color.get -> Solti.Utils.Primitives.NodeColor
Solti.Utils.Primitives.RedBlackTreeNode<TData>.Data.get -> TData
Solti.Utils.Primitives.RedBlackTreeNode<TData>.DeepClone() -> Solti.Utils.Primitives.RedBlackTreeNode<TData>
Solti.Utils.Primitives.RedBlackTreeNode<TData>.Left.get -> Solti.Utils.Primitives.RedBlackTreeNode<TData>
Solti.Utils.Primitives.RedBlackTreeNode<TData>.RedBlackTreeNode(TData data, Solti.Utils.Primitives.NodeColor color = Solti.Utils.Primitives.NodeColor.Unspecified) -> void
Solti.Utils.Primitives.RedBlackTreeNode<TData>.Right.get -> Solti.Utils.Primitives.RedBlackTreeNode<TData>
Solti.Utils.Primitives.RedBlackTreeNode<TData>.ShallowClone() -> Solti.Utils.Primitives.RedBlackTreeNode<TData>
Solti.Utils.Primitives.StaticMethod
Solti.Utils.Primitives.Threading.CheckoutPolicy
Solti.Utils.Primitives.Threading.CheckoutPolicy.Block = 0 -> Solti.Utils.Primitives.Threading.CheckoutPolicy
Solti.Utils.Primitives.Threading.CheckoutPolicy.Discard = 2 -> Solti.Utils.Primitives.Threading.CheckoutPolicy
Solti.Utils.Primitives.Threading.CheckoutPolicy.Throw = 1 -> Solti.Utils.Primitives.Threading.CheckoutPolicy
Solti.Utils.Primitives.Threading.ExclusiveBlock
Solti.Utils.Primitives.Threading.ExclusiveBlock.Enter() -> System.IDisposable
Solti.Utils.Primitives.Threading.ExclusiveBlock.ExclusiveBlock() -> void
Solti.Utils.Primitives.Threading.ExclusiveBlock.ExclusiveBlock(Solti.Utils.Primitives.Threading.ExclusiveBlockFeatures features) -> void
Solti.Utils.Primitives.Threading.ExclusiveBlock.Features.get -> Solti.Utils.Primitives.Threading.ExclusiveBlockFeatures
Solti.Utils.Primitives.Threading.ExclusiveBlockFeatures
Solti.Utils.Primitives.Threading.ExclusiveBlockFeatures.None = 0 -> Solti.Utils.Primitives.Threading.ExclusiveBlockFeatures
Solti.Utils.Primitives.Threading.ExclusiveBlockFeatures.SupportsRecursion = 1 -> Solti.Utils.Primitives.Threading.ExclusiveBlockFeatures
Solti.Utils.Primitives.Threading.ILifetimeManager<T>
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.CheckIn(T item) -> void
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.CheckOut(T item) -> void
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Create() -> T
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Default
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Default.CheckIn(T item) -> void
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Default.CheckOut(T item) -> void
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Default.Create() -> T
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Default.Default(System.Func<T> factory) -> void
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Default.Dispose(T item) -> void
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Default.Factory.get -> System.Func<T>
Solti.Utils.Primitives.Threading.ILifetimeManager<T>.Dispose(T item) -> void
Solti.Utils.Primitives.Threading.InterlockedExtensions
Solti.Utils.Primitives.Threading.IPoolItem<T>
Solti.Utils.Primitives.Threading.IPoolItem<T>.Value.get -> T
Solti.Utils.Primitives.Threading.ObjectPool<T>
Solti.Utils.Primitives.Threading.ObjectPool<T>.Config.get -> Solti.Utils.Primitives.Threading.PoolConfig
Solti.Utils.Primitives.Threading.ObjectPool<T>.Count.get -> int
Solti.Utils.Primitives.Threading.ObjectPool<T>.Get(System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> Solti.Utils.Primitives.Threading.IPoolItem<T>
Solti.Utils.Primitives.Threading.ObjectPool<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>
Solti.Utils.Primitives.Threading.ObjectPool<T>.LifetimeManager.get -> Solti.Utils.Primitives.Threading.ILifetimeManager<T>
Solti.Utils.Primitives.Threading.ObjectPool<T>.ObjectPool(Solti.Utils.Primitives.Threading.ILifetimeManager<T> lifetimeManager, Solti.Utils.Primitives.Threading.PoolConfig config = null) -> void
Solti.Utils.Primitives.Threading.ObjectPool<T>.ObjectPool(System.Func<T> factory, Solti.Utils.Primitives.Threading.PoolConfig config = null) -> void
Solti.Utils.Primitives.Threading.PoolConfig
Solti.Utils.Primitives.Threading.PoolConfig.Capacity.get -> int
Solti.Utils.Primitives.Threading.PoolConfig.Capacity.init -> void
Solti.Utils.Primitives.Threading.PoolConfig.CheckoutPolicy.get -> Solti.Utils.Primitives.Threading.CheckoutPolicy
Solti.Utils.Primitives.Threading.PoolConfig.CheckoutPolicy.init -> void
Solti.Utils.Primitives.Threading.ReaderWriterLockExtensions
Solti.Utils.Primitives.Threading.SafeEnumerator<T>
Solti.Utils.Primitives.Threading.SafeEnumerator<T>.Current.get -> T
Solti.Utils.Primitives.Threading.SafeEnumerator<T>.MoveNext() -> bool
Solti.Utils.Primitives.Threading.SafeEnumerator<T>.Reset() -> void
Solti.Utils.Primitives.Threading.SafeEnumerator<T>.SafeEnumerator(System.Collections.Generic.IEnumerable<T> src, System.Threading.ReaderWriterLockSlim lock) -> void
Solti.Utils.Primitives.Threading.TaskExtensions
Solti.Utils.Primitives.TypeExtensions
static Solti.Utils.Primitives.Cache.Clear<TKey, TValue>() -> void
static Solti.Utils.Primitives.Cache.GetOrAdd<TKey, TValue>(TKey key, System.Func<TKey, TValue> factory, string scope = "") -> TValue
static Solti.Utils.Primitives.CacheSlim.Clear<TKey, TValue>() -> void
static Solti.Utils.Primitives.CacheSlim.GetOrAdd<TKey, TValue>(TKey key, System.Func<TKey, TValue> factory) -> TValue
static Solti.Utils.Primitives.ComparerBase<TConcreteComparer, T>.Instance.get -> TConcreteComparer
static Solti.Utils.Primitives.ConstructorInfoExtractor.Extract(System.Linq.Expressions.LambdaExpression exprression) -> System.Reflection.ConstructorInfo
static Solti.Utils.Primitives.ConstructorInfoExtractor.Extract<T>(System.Linq.Expressions.Expression<System.Func<T>> exprression) -> System.Reflection.ConstructorInfo
static Solti.Utils.Primitives.EnumerableExtensions.ForEach<T>(this System.Collections.Generic.IEnumerable<T> src, System.Action<T, int> callback) -> void
static Solti.Utils.Primitives.ExpressionExtensions.GetDebugView(this System.Linq.Expressions.Expression expression) -> string
static Solti.Utils.Primitives.MethodInfoExtensions.ToInstanceDelegate(this System.Reflection.MethodInfo method) -> Solti.Utils.Primitives.InstanceMethod
static Solti.Utils.Primitives.MethodInfoExtensions.ToStaticDelegate(this System.Reflection.MethodBase methodBase) -> Solti.Utils.Primitives.StaticMethod
static Solti.Utils.Primitives.MethodInfoExtractor.Extract(System.Linq.Expressions.Expression<System.Action> exprression) -> System.Reflection.MethodInfo
static Solti.Utils.Primitives.MethodInfoExtractor.Extract(System.Linq.Expressions.LambdaExpression exprression) -> System.Reflection.MethodInfo
static Solti.Utils.Primitives.MethodInfoExtractor.Extract<T>(System.Linq.Expressions.Expression<System.Action<T>> exprression) -> System.Reflection.MethodInfo
static Solti.Utils.Primitives.MethodInfoExtractor.Extract<T, TT>(System.Linq.Expressions.Expression<System.Action<T, TT>!>! exprression) -> System.Reflection.MethodInfo!
static Solti.Utils.Primitives.Patterns.Singleton<TConcrete>.Instance.get -> TConcrete
static Solti.Utils.Primitives.PropertyInfoExtensions.ToGetter(this System.Reflection.PropertyInfo src) -> Solti.Utils.Primitives.InstanceMethod
static Solti.Utils.Primitives.PropertyInfoExtensions.ToSetter(this System.Reflection.PropertyInfo src) -> Solti.Utils.Primitives.InstanceMethod
static Solti.Utils.Primitives.PropertyInfoExtractor.Extract(System.Linq.Expressions.LambdaExpression exprression) -> System.Reflection.PropertyInfo
static Solti.Utils.Primitives.PropertyInfoExtractor.Extract<T, TT>(System.Linq.Expressions.Expression<System.Func<T, TT>> exprression) -> System.Reflection.PropertyInfo
static Solti.Utils.Primitives.PropertyInfoExtractor.Extract<T>(System.Linq.Expressions.Expression<System.Func<T>> exprression) -> System.Reflection.PropertyInfo
static Solti.Utils.Primitives.RedBlackTreeExtensions.Clone<TData>(this Solti.Utils.Primitives.RedBlackTree<TData> src) -> Solti.Utils.Primitives.RedBlackTree<TData>
static Solti.Utils.Primitives.RedBlackTreeExtensions.CreateLookup<TKey, TValue>() -> Solti.Utils.Primitives.RedBlackTree<System.Collections.Generic.KeyValuePair<TKey, TValue>>
static Solti.Utils.Primitives.RedBlackTreeExtensions.TryAdd<TKey, TValue>(this Solti.Utils.Primitives.RedBlackTree<System.Collections.Generic.KeyValuePair<TKey, TValue>> src, TKey key, TValue value) -> bool
static Solti.Utils.Primitives.RedBlackTreeExtensions.TryGet<TKey, TValue>(this Solti.Utils.Primitives.RedBlackTree<System.Collections.Generic.KeyValuePair<TKey, TValue>> src, TKey key, out TValue result) -> bool
static Solti.Utils.Primitives.Threading.InterlockedExtensions.DecrementIfGreaterThan(ref int location, int comparand) -> int?
static Solti.Utils.Primitives.Threading.InterlockedExtensions.IncrementIfGreaterThan(ref int location, int comparand) -> int?
static Solti.Utils.Primitives.Threading.InterlockedExtensions.IncrementIfLessThan(ref int location, int comparand) -> int?
static Solti.Utils.Primitives.Threading.InterlockedExtensions.Max(ref int location, int comparand) -> int
static Solti.Utils.Primitives.Threading.InterlockedExtensions.Or(ref int location, int value) -> int
static Solti.Utils.Primitives.Threading.PoolConfig.Default.get -> Solti.Utils.Primitives.Threading.PoolConfig
static Solti.Utils.Primitives.Threading.ReaderWriterLockExtensions.AcquireReaderLock(this System.Threading.ReaderWriterLockSlim src) -> System.IDisposable
static Solti.Utils.Primitives.Threading.ReaderWriterLockExtensions.AcquireWriterLock(this System.Threading.ReaderWriterLockSlim src) -> System.IDisposable
static Solti.Utils.Primitives.Threading.TaskExtensions.Cast<T, TT>(this System.Threading.Tasks.Task<T> task) -> System.Threading.Tasks.Task<TT>
static Solti.Utils.Primitives.Threading.TaskExtensions.Cast<T>(this System.Threading.Tasks.Task<T> task, System.Type returnType) -> System.Threading.Tasks.Task
static Solti.Utils.Primitives.TypeExtensions.GetFriendlyName(this System.Type src) -> string
virtual Solti.Utils.Primitives.ComparerBase<TConcreteComparer, T>.Equals(T x, T y) -> bool
virtual Solti.Utils.Primitives.Patterns.Disposable.AsyncDispose() -> System.Threading.Tasks.ValueTask
virtual Solti.Utils.Primitives.Patterns.Disposable.Dispose(bool disposeManaged) -> void